function result = orthov2( roi,root, x, y, z)
% function result = orthov2( roi_size, root,   x, y, z)
% ...or    result=orthov2()
%
% this function thakes a file in analyze format and 
% displays orthogonal sections thru the planes interscting
% at x,y,z
%
% additionally, this functiona allows you to extract a time series
% from a chose pixel, just by clicking on it.  The time series is saved
% in the file "tdata.dat" if you use the RIGHT MOUSE BUTTON.
% This file gets overwritten everytime you select a new pixel.
%
global wscale

    switch nargin
    case 0         % GUI selection of analtomical and time series
        roi=0;
    
        % select the image to display
        [name path] = uigetfile('*.img','Select Anatomical *.img file');
        name = strcat(path,name)
        
        sz = size(name);
        
        imgname = strcat(name(1,1:sz(2)-4) , '.img');
        hdrname = strcat(name(1,1:sz(2)-4) , '.hdr');
        h = read_hdr(hdrname);
        d = read_img2(h, imgname);
        
        % now select the time series
        [file path] = uigetfile('*.img','Select one of the Analyze files in the series ');
        
    case 1         % GUI selection of analtomical and time series
        
        % select the image to display
        [name path] = uigetfile('*.img','Select Anatomical *.img file');
        name = strcat(path,name)
        
        sz = size(name);
        
        imgname = strcat(name(1,1:sz(2)-4) , '.img');
        hdrname = strcat(name(1,1:sz(2)-4) , '.hdr');
        h = read_hdr(hdrname);
        d = read_img2(h, imgname);
        
        % now select the time series
        [file path] = uigetfile('*.img','Select one of the Analyze files in the series ');
  
    case 2  % NO GUI selection : time series and anatomical are the same.
        
        % image to display ....
        h = read_hdr(strcat(root,'.hdr'));
        d = read_img2(h, (strcat(root,'.img') ));
        
        % time series
        file = sprintf('%s.img',root);
        path = pwd;
        
        
    otherwise
        % image to display ....
        h = read_hdr(strcat(root,'.hdr'));
        d = read_img2(h, (strcat(root,'.img') ));
        
        % time series
        file = sprintf('%s.img',root);
        path = pwd;
     end
      
     if nargin <5
        x=ceil(h.xdim/2);
        y=ceil(h.ydim/2);
        z=ceil(h.zdim/2);
    end

    
    stretch = h.zsize/h.xsize;
    
    % display the orthogonal sections
    colordef black 	
    colormap(gray)
            
%     fprintf('\n(x,y,z)=  %d %d %d , val= %d, roi radius=%d', x, y, z, d(x,y,z), roi);
%     
%     colordef black
%     fig1=subplot (221), imagesc(squeeze(d(:,:,z))), axis ([1 h.ydim 1 h.xdim]) ,axis xy 
%     hold on; plot(y,x,'go');hold off;
%     fig2=subplot (222), imagesc(squeeze(d(:,y,:))'), axis ([1 h.xdim 0 h.zdim*stretch]),axis xy 
%     hold on; plot(x,z,'go');hold off;
%     fig3=subplot (223), imagesc(squeeze(d(x,:,:))'), axis ([1 h.ydim 0 h.zdim*stretch]), axis xy
%     hold on; plot(y,z,'go');hold off;
    
    colordef white
    
    tdata = timeplot2(path, file,[x-roi x+roi],[y-roi y+roi],[z-roi z+roi]);
    %tdata = timeplot2(path, file,[x-1 x+1],[y-1 y+1],[z-1 z+1]);
    subplot 224, plot(tdata), axis tight;
    


	%%%%%%

    i=0;

    my_map=(0:255)';
    my_map=[my_map my_map my_map]/256;
    colormap(my_map);
    dd = d*256/max(max(max(d)));
    
    % scale image to fit colormap
    range= max(max(max(d))) - min(min(min(d)));
    dd = (d-min(min(min(d))))*256/range;
    if ~isempty(wscale)
         dd = (d-wscale(1))*256 / wscale(2);
     end

    if ~isempty(wscale)
         dd = (d-wscale(1))*256 / wscale(2);
     end

    while i >= -10
      
	[fig1, fig2, fig3] =  ov(h,dd,x,y,z,roi);
	str = sprintf('\n(x,y,z)=  (%d %d %d) , val= %6.2f  \n', x, y, z, d(x,y,z));
	subplot(221), title(str) 

		
	tdata = timeplot2(path, file,[x-roi x+roi],[y-roi y+roi],[z-roi z+roi]);
        %tdata = timeplot2(path, file,[x-1 x+1],[y-1 y+1],[z-1 z+1]);
        subplot 224, plot(tdata), axis tight;
        grid on
        
        [i j button] = ginput(1);
        i=round(i);j=round(j);
        fig = floor(gca);
        switch(fig)
        case floor(fig1)
            x=j;
            y=i;
        case floor(fig2)
            z=j;
            x=i;
        case floor(fig3)
            y=i;
            z=j;
        end
        
        if button==3
            save tdata.dat tdata -ASCII
        end
        
    end 
    result = tdata;
    	
return

